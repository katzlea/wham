ggplot(mydata,aes(cla)) +
geom_bar(stat="count")
ggplot(mydata,aes(chla)) +
geom_bar(stat="count")
## CHECK DISTRIBUTION TAXA (PRESENCE/ABSENCE)
gg_melt <- pivot_longer(mydata)
## CHECK DISTRIBUTION TAXA (PRESENCE/ABSENCE)
gg_melt <- pivot_longer(mydata,1:ncol(mydata))
View(gg_melt)
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
#---- ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata[,3:ncol(mydata)]<-lapply(mydata[,3:ncol(mydata)],function(x) ifelse(x==0,0,1))
mydata[,3:ncol(mydata)]<-lapply(mydata[,3:ncol(mydata)],function(x) as.factor(x))
## CHECK DISTRIBUTION TAXA (PRESENCE/ABSENCE)
gg_melt <- pivot_longer(mydata,3:ncol(mydata),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
## ABUNDANCE => ABSENT/LOW/HIGH (3 levels)
source("wham_code/functions/get.hilo.R")
irid.cor<-get.hilo(mydata$`Iridaea cordata`)
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
discrete<-mydata
mydata_raw<-load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
library(bnlearn)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) as.factor(x))
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
## ABUNDANCE => ABSENT/LOW/HIGH (3 levels)
source("wham_code/functions/get.hilo.R")
irid.cor<-get.hilo(mydata$`Iridaea cordata`)
library(bnlearn)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) as.factor(x))
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
## ABUNDANCE => ABSENT/LOW/HIGH (3 levels)
source("wham_code/functions/get.hilo.R")
irid.cor<-get.hilo(mydata$`Iridaea cordata`)
discr$`Iridaea cordata` %>% as.factor(irid.cor)
as.factor(irid.cor)
irid.cor<-as.factor(get.hilo(mydata$`Iridaea cordata`))
discr$`Iridaea cordata`<-as.factor(get.hilo(mydata$`Iridaea cordata`))
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr, nlevels) > 1]
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
# go back to "check distribution" and make gg_melt again.
#________________________________________
## GROUP TAXA TOGETHER
# sea stars except odon.val
starfish<-c("Asteroidea","Labidiaster annulatus",)
# go back to "check distribution" and make gg_melt again.
#________________________________________
## GROUP TAXA TOGETHER
# sea stars except odon.val
starish_list<-c("Asteroidea","Labidiaster annulatus",)
starfish<-mydata[,starfish_list]
star_sum<-rowSums(starfish)
mydata<-mydata[ , !(names(mydata) %in% starfish_list)]
# go back to "check distribution" and make gg_melt again.
#________________________________________
## GROUP TAXA TOGETHER
# sea stars except odon.val
starfish_list<-c("Asteroidea","Labidiaster annulatus",)
starfish<-mydata[,starfish_list]
star_sum<-rowSums(starfish)
mydata<-mydata[ , !(names(mydata) %in% starfish_list)]
# go back to "check distribution" and make gg_melt again.
#________________________________________
## GROUP TAXA TOGETHER
# sea stars except odon.val
starfish_list<-c("Asteroidea","Labidiaster annulatus")
starfish<-mydata[,starfish_list]
star_sum<-rowSums(starfish)
View(mydata)
starfish<-rowSums(starfish)
starfish<-rowSums(starfish) %>% ifelse(x==0,0,1)
starfish<-ifelse(starfish==0,0,1)
starfish<-as.factor(ifelse(starfish==0,0,1))
discr$starfish<-as.factor(ifelse(starfish==0,0,1))
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
o
#---- METADATA => FACTORS
env[,2:ncol(env)]<-lapply(env[,2:ncol(env)],function(x) as.factor(x))
#---- MERGE ENV DATA WITH ABUNDANCE
mydata<-inner_join(discr,env,by="dive")
View(discr)
libary(bnlearn)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) as.factor(x))
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr, nlevels) > 1]
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr[,3:ncol(discr)], nlevels) > 1]
s
# REMOVE VARIABLES WITH ONLY ZERO
discr[,3:ncol(discr)]<-discr[,sapply(discr[,3:ncol(discr)], nlevels) > 1]
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) as.factor(x))
# REMOVE VARIABLES WITH ONLY ZERO
discr[,3:ncol(discr)]<-discr[,sapply(discr[,3:ncol(discr)], nlevels) > 1]
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr[,3:ncol(discr)], nlevels) > 1]
library(bnlearn)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) as.factor(x))
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) as.factor(x))
discr<-discr[,sapply(discr, nlevels) > 1]
env[,1:ncol(env)]<-lapply(env[,1:ncol(env)],function(x) as.factor(x))
#---- MERGE ENV DATA WITH ABUNDANCE
mydata<-inner_join(mydata,env,by="dive")
#---- SAVE
save(mydata,file=paste0("wham_data/",campaign,"/",campaign,"_bni2.RData"))
library(bnlearn)
library(Rgraphviz)
library(boot)
library(dplyr)
library(bnlearn)
library(Rgraphviz)
library(boot)
library(dplyr)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_bni2.RData"))
#---- SAVE
save(mydata,file=paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
## ALGORITHM
bn_pc<-pc.stable(mydata)
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
library(bnlearn)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) as.factor(x))
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr, nlevels) > 1]
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
#_________________________________________
## ABUNDANCE => ABSENT/LOW/HIGH (3 levels)
source("wham_code/functions/get.hilo.R")
discr$`Iridaea cordata`<-as.factor(get.hilo(mydata$`Iridaea cordata`))
# go back to "check distribution" and make gg_melt again.
#________________________________________
## GROUP TAXA TOGETHER
# sea stars except odon.val
starfish_list<-c("Asteroidea","Labidiaster annulatus")
starfish<-mydata[,starfish_list]
starfish<-rowSums(starfish)
discr$starfish<-as.factor(ifelse(starfish==0,0,1))
# go back to "check distribution" and make gg_melt again.
# if satisfied : remove grou
final<-discr[ , !(names(mydata) %in% starfish_list)]
# go back to "check distribution" and make gg_melt again.
# if satisfied : remove grou
final<-discr[ , !(names(discr) %in% starfish_list)]
#---- METADATA => FACTORS
env[,1:ncol(env)]<-lapply(env[,1:ncol(env)],function(x) as.factor(x))
#---- MERGE ENV DATA WITH ABUNDANCE
mydata<-inner_join(discr,env,by="dive")
#---- MERGE ENV DATA WITH ABUNDANCE
mydata<-inner_join(final,env,by="dive")
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) as.factor(x))
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr, nlevels) > 1]
d
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) as.factor(x))
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_abundance.RData"))
load(paste0("wham_data/",campaign,"/",campaign,"_metadata.RData"))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) ifelse(x==0,0,1))
#------------------------------------------------------------------------------------
## ABUNDANCE => PRESENCE/ABSENCE (2 levels)
mydata->discr
discr[,3:ncol(discr)]<-lapply(discr[,3:ncol(discr)],function(x) ifelse(x==0,0,1))
discr[,1:ncol(discr)]<-lapply(discr[,1:ncol(discr)],function(x) as.factor(x))
# REMOVE VARIABLES WITH ONLY ZERO
discr<-discr[,sapply(discr, nlevels) > 1]
# CHECK DISTRIBUTION OF PRESENCE/ABSENCE
gg_melt <- pivot_longer(discr,3:ncol(discr),names_to="species")
ggplot(gg_melt, aes(value)) +
geom_bar(stat="count") +
scale_x_discrete(labels = c("0" = "0", "1" = "1")) +
facet_wrap(~species)
#_________________________________________
## ABUNDANCE => ABSENT/LOW/HIGH (3 levels)
source("wham_code/functions/get.hilo.R")
discr$`Iridaea cordata`<-as.factor(get.hilo(mydata$`Iridaea cordata`))
# go back to "check distribution" and make gg_melt again.
#________________________________________
## GROUP TAXA TOGETHER
# sea stars except odon.val
starfish_list<-c("Asteroidea","Labidiaster annulatus")
starfish<-mydata[,starfish_list]
starfish<-rowSums(starfish)
discr$starfish<-as.factor(ifelse(starfish==0,0,1))
# go back to "check distribution" and make gg_melt again.
# if satisfied : remove grou
final<-discr[ , !(names(discr) %in% starfish_list)]
#---- METADATA => FACTORS
env[,1:ncol(env)]<-lapply(env[,1:ncol(env)],function(x) as.factor(x))
#---- MERGE ENV DATA WITH ABUNDANCE
mydata<-inner_join(final,env,by="dive")
#---- SAVE
save(mydata,file=paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
## ALGORITHM
bn_pc<-pc.stable(mydata)
## ALGORITHM
bn_pc<-pc.stable(mydata)
## ALGORITHM
bn_pc<-pc.stable(mydata)
mydata$dive
## ALGORITHM
bn_pc<-pc.stable(mydata)
## ALGORITHM
bn_pc<-pc.stable(mydata[2:ncol(mydata)])
## ALGORITHM
bn_pc<-pc.stable(mydata[3:ncol(mydata)])
library(bnlearn)
library(Rgraphviz)
library(boot)
library(dplyr)
campaign="B121"
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
## ALGORITHM
bn_pc<-pc.stable(mydata)
#---- LOAD DATA
load(paste0("wham_data/",campaign,"/",campaign,"_bni.RData"))
## ALGORITHM
bn_pc<-pc.stable(mydata)
## ALGORITHM
bn_pc<-pc.stable(as.data.frame(mydata))
View(bn_pc)
## PLOT
graphviz.plot(bn_pc)
#------------------------------------------------------------------------------------
## RE-SAMPLING (BOOTSTRAP)
booty<-rsample::bootstraps(mydata,
times = 100,
apparent = TRUE)
booty<-as.list(booty$splits)
booties<-mydata
for (i in 1:length(booty)) {
booties<-rbind(booties,booty[[i]][["data"]])
}
for (i in 1:length(booty)) {
booties<-rbind(booties,booty[[i]][["data"]])
}
bn_pc_booty<-pc.stable(booties)
mydata<-as.data.frame(mydata)
booties<-mydata
for (i in 1:length(booty)) {
booties<-rbind(booties,booty[[i]][["data"]])
}
bn_pc_booty<-pc.stable(booties)
## PLOT
graphviz.plot(bn_pc_booty)
#----------------------STUDYING THE NETWORK
compare(bn_pc,bn_pc_booty)
#----------------------STUDYING THE NETWORK
compare(bn_pc,bn_pc_booty)
library(ade4)
campaign="B121"
# ---- LOAD DATA
# to use the package, dataframe with fuzzy coding needs to be a list with :
#  - "tab" = a dataframe with the fuzzy coding
#  - "species.names" = a vector of species names
#  - "moda.names" = a vector of fuzzy variables names
#  - "families" = a factor species family
#  - "col.blocks" = a vector containing the number of categories of each trait.
load(pasto0("wham_data/",campaign,"/",campaign,"_functional_traits.csv"))
# ---- LOAD DATA
# to use the package, dataframe with fuzzy coding needs to be a list with :
#  - "tab" = a dataframe with the fuzzy coding
#  - "species.names" = a vector of species names
#  - "moda.names" = a vector of fuzzy variables names
#  - "families" = a factor species family
#  - "col.blocks" = a vector containing the number of categories of each trait.
load(paste0("wham_data/",campaign,"/",campaign,"_functional_traits.csv"))
# ---- LOAD DATA
# to use the package, dataframe with fuzzy coding needs to be a list with :
#  - "tab" = a dataframe with the fuzzy coding
#  - "species.names" = a vector of species names
#  - "moda.names" = a vector of fuzzy variables names
#  - "families" = a factor species family
#  - "col.blocks" = a vector containing the number of categories of each trait.
traits<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_functional_traits.csv"))
# ---- LOAD DATA
# to use the package, dataframe with fuzzy coding needs to be a list with :
#  - "tab" = a dataframe with the fuzzy coding
#  - "species.names" = a vector of species names
#  - "moda.names" = a vector of fuzzy variables names
#  - "families" = a factor species family
#  - "col.blocks" = a vector containing the number of categories of each trait.
traits<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_functional_traits.csv"))
col.blocks<-as.numeric(read.csv(paste0("wham_data/",campaign,"/",campaign,"_col.blocks.csv")))
col.blocks.csv<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_col.blocks.csv"))
col.blocks<-as.numeric(col.blocks.csv)
names(col.blocks)<-colnames(col.blocks.csv) #makes a named num vector
traits[,5:ncol(traits)]<-as.numeric(unlist(traits[,5:ncol(traits)]))
# ASSIGN
tab<-traits[,5:ncol(traits)] #take only columns with fuzzy coding
tab[is.na(tab)] = 0
species.names<-traits$species
moda.names<-traits$category
families<-traits$family
library(ade4)
campaign="B121"
#---- LOAD DATA
# to use the package, dataframe with fuzzy coding needs to be a list with :
#  - "tab" = a dataframe with the fuzzy coding
#  - "species.names" = a vector of species names
#  - "moda.names" = a vector of fuzzy variables names
#  - "families" = a factor species family
#  - "col.blocks" = a vector containing the number of categories of each trait.
traits<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_functional_traits.csv"))
col.blocks.csv<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_col.blocks.csv"))
# FORMAT
col.blocks<-as.numeric(col.blocks.csv)
names(col.blocks)<-colnames(col.blocks.csv) #makes a named num vector
# ASSIGN
tab<-as.numeric(traits[,5:ncol(traits)]) #take only columns with fuzzy coding
tab[is.na(tab)] = 0
species.names<-traits$species
moda.names<-traits$category
families<-traits$family
#---- PREPARE DATASET
fuzzy<-list(tab = tab,species.names = species.names,moda.names = moda.names, families = families,col.blocks = col.blocks)
fuzzy_prep<-prep.fuzzy.var(fuzzy$tab,fuzzy$col.blocks, row.w = rep(1,nrow(fuzzy$tab))) #data prep
fca<-dudi.fca(fuzzy_prep, sca = FALSE, nf=3) #fca doesn't work because too much 0?
y
#---- PREPARE DATASET
fuzzy<-list(tab = tab,species.names = species.names,moda.names = moda.names, families = families,col.blocks = col.blocks)
# ASSIGN
tab<-as.numeric(traits[,5:ncol(traits)]) #take only columns with fuzzy coding
tab[is.na(tab)] = 0
#---- LOAD DATA
# to use the package, dataframe with fuzzy coding needs to be a list with :
#  - "tab" = a dataframe with the fuzzy coding
#  - "species.names" = a vector of species names
#  - "moda.names" = a vector of fuzzy variables names
#  - "families" = a factor species family
#  - "col.blocks" = a vector containing the number of categories of each trait.
traits<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_functional_traits.csv"))
col.blocks.csv<-read.csv(paste0("wham_data/",campaign,"/",campaign,"_col.blocks.csv"))
# FORMAT
col.blocks<-as.numeric(col.blocks.csv)
names(col.blocks)<-colnames(col.blocks.csv) #makes a named num vector
# ASSIGN
tab<-as.numeric(traits[,5:ncol(traits)]) #take only columns with fuzzy coding
names(col.blocks)<-colnames(col.blocks.csv) #makes a named num vector
traits[,5:ncol(traits)]<-as.numeric(unlist(traits[,5:ncol(traits)]))
# ASSIGN
tab<-traits[,5:ncol(traits)] #take only columns with fuzzy coding
tab[is.na(tab)] = 0
species.names<-traits$species
moda.names<-traits$category
families<-traits$family
fuzzy<-list(tab = tab,species.names = species.names,moda.names = moda.names, families = families,col.blocks = col.blocks)
fuzzy_prep<-prep.fuzzy.var(fuzzy$tab,fuzzy$col.blocks, row.w = rep(1,nrow(fuzzy$tab))) #data prep
fca1<-dudi.fca(fuzzy_prep, sca = FALSE, nf=3) #fca doesn't work because too much 0?
indica<-factor(rep(names(fuzzy$col),fuzzy$col))
#make a graph
if(adegraphicsLoaded()) {
glist <- list()
for(i in levels(indica)) {
df <- fuzzy$tab[, which(indica == i)]
names(df) <- fuzzy$moda.names[which(indica == i)]
glist[i] <- s.distri(fca1$l1, df
#psub.text = as.character(i),
#ellipseSize = 0,
#starSize = 0.5,
#plot = FALSE,
#storeData = TRUE
)
}
G <- ADEgS(glist, layout = c(3, 3))
} else {
par(mfrow = c(3, 3))
for(j in levels(indica))
s.distri(fca1$l1, fuzzy$tab[, which(indica == j)], clab = 1.5, sub = as.character(j),
cell = 0, csta = 0.5, csub = 3, label = fuzzy$moda.names[which(indica == j)])
par(op)
par(mfrow = c(1, 1))
}
fuzzy<-list(tab = tab,species.names = species.names,moda.names = moda.names, families = families,col.blocks = col.blocks)
fuzzy_prep<-prep.fuzzy.var(fuzzy$tab,fuzzy$col.blocks, row.w = rep(1,nrow(fuzzy$tab))) #data prep
fca<-dudi.fca(fuzzy_prep, sca = FALSE, nf=3) #fca doesn't work because too much 0?
View(fuzzy)
tab[is.na(tab)] = 0
species.names<-traits$species
moda.names<-traits$category
families<-traits$family
fuzzy<-list(tab = tab,species.names = species.names,moda.names = moda.names, families = families,col.blocks = col.blocks)
fuzzy_prep<-prep.fuzzy.var(fuzzy$tab,fuzzy$col.blocks, row.w = rep(1,nrow(fuzzy$tab))) #data prep
fca<-dudi.fca(fuzzy_prep, sca = FALSE, nf=3) #fca doesn't work because too much 0?
View(col.blocks.csv)
# ASSIGN
tab<-traits[,5:ncol(traits)] #take only columns with fuzzy coding
View(tab)
fuzzy_prep<-prep.fuzzy.var(fuzzy$tab,fuzzy$col.blocks, row.w = rep(1,nrow(fuzzy$tab))) #data prep
fuzzy_prep<-na.omit(fuzzy_prep)
fca<-dudi.fca(fuzzy_prep, sca = FALSE, nf=3) #fca doesn't work because too much 0?
View(fuzzy_prep)
# ASSIGN
tab<-traits[,5:ncol(traits)] #take only columns with fuzzy coding
fuzzy<-list(tab = tab,species.names = species.names,moda.names = moda.names, families = families,col.blocks = col.blocks)
fuzzy_prep<-prep.fuzzy.var(fuzzy$tab,fuzzy$col.blocks, row.w = rep(1,nrow(fuzzy$tab))) #data prep
fuzzy_prep<-na.omit(fuzzy_prep)
na.omit(fuzzy_prep)
fuzzy2<-na.omit(fuzzy_prep)
tab<-na.omit(tab)
# ASSIGN
tab<-traits[,5:ncol(traits)] #take only columns with fuzzy coding
tab[ , colSums(is.na(tab))==0]
